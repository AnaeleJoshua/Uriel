openapi: 3.0.0
info:
  title: Organisation Management API
  description: API for managing users, organisations, and their associations.
  version: 1.0.0
  contact:
    name: Anaele Joshua
    url: https://github.com/AnaeleJoshua
    email: anaelejoshua@gmail.com

servers:
  - url: http://localhost:4000/api/v1
  - url: http://127.0.0.1:4000/api/v1
    description: Development Server
  - url: https://uriel-1.onrender.com/api/v1

paths:
  # --- Authentication ---
  /auth/login:
    post:
      summary: Login a user and get access token
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email: { type: string, example: user@example.com }
                password: { type: string, example: Password123 }
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    description: JWT access token to be used in Authorization header
        '401': { description: Invalid credentials }

  /auth/register:
    post:
      summary: Register a new user
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email: { type: string, example: user@example.com }
                password: { type: string, example: Password123 }
                firstName: { type: string, example: John }
                lastName: { type: string, example: Doe }
                phone: { type: string, example: "+123456789" }
      responses:
        '201': { description: User registered successfully }
        '400': { description: Invalid input }

  /auth/new-access-token:
    post:
      summary: Get a new access token using refresh token
      tags: [Authentication]
      responses:
        '200':
          description: New access token issued
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    description: New JWT access token
        '403': { description: Forbidden }

  /auth/logout:
    post:
      summary: Log out user session
      tags: [Authentication]
      responses:
        '200': { description: Logout successful }

  # --- User Management ---
  /users/{id}:
    get:
      summary: Get user by ID
      tags: [User Management]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      security:
        - bearerAuth: []   # ðŸ”’ requires token
      responses:
        '200': { description: User retrieved successfully }
        '401': { description: Unauthorized }

  /users/update/{id}:
    patch:
      summary: Update user profile
      tags: [User Management]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      security:
        - bearerAuth: []   # ðŸ”’ requires token
      responses:
        '200': { description: User updated successfully }
        '400': { description: Failed to update record }

  # --- Organisation Management ---
  /organisations:
    get:
      summary: Get all organisations for a user
      tags: [Organisation Management]
      security:
        - bearerAuth: []   # ðŸ”’ requires token
      responses:
        '200': { description: Organisations retrieved successfully }
        '404': { description: No organisations found }
    post:
      summary: Create a new organisation
      tags: [Organisation Management]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Organisation'
      security:
        - bearerAuth: []   # ðŸ”’ requires token
      responses:
        '201': { description: Organisation created successfully }
        '400': { description: Invalid input }

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT   # for documentation purposes

  schemas:
    User:
      type: object
      properties:
        userId: { type: integer }
        email: { type: string }
        firstName: { type: string }
        lastName: { type: string }
        phone: { type: string }
        refreshToken: { type: string }
    Organisation:
      type: object
      properties:
        orgId: { type: integer }
        name: { type: string }
        description: { type: string }
