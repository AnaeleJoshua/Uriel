openapi: 3.0.0
info:
  title: Organisation Management API
  description: API for managing users, organisations, and their associations.
  version: 1.0.0
  contact:
    name: Anaele Joshua
    url: https://github.com/AnaeleJoshua
    email: anaelejoshua@gmail.com
servers:
  - url: http://localhost:4000/api/v1
  - url: http://127.0.0.1:4000/api/v1

    description: Development Server
  - url: https://uriel-1.onrender.com/api/v1

paths:
  # --- Authentication ---
  /auth/login:
    post:
      summary: Login a user and get access token
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email: { type: string, example: user@example.com }
                password: { type: string, example: Password123 }
      responses:
        '200': { description: Login successful }
        '401': { description: Invalid credentials }

  /auth/register:
    post:
      summary: Register a new user
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email: { type: string, example: user@example.com }
                password: { type: string, example: Password123 }
                firstName: { type: string, example: John }
                lastName: { type: string, example: Doe }
                phone: { type: string, example: "+123456789" }
      responses:
        '201': { description: User registered successfully }
        '400': { description: Invalid input }

  /auth/new-access-token:
    post:
      summary: Get a new access token using refresh token
      tags: [Authentication]
      responses:
        '200': { description: New access token issued }
        '403': { description: Forbidden }

  /auth/logout:
    post:
      summary: Log out user session
      tags: [Authentication]
      responses:
        '200': { description: Logout successful }

  /auth/confirm-email:
    get:
      summary: Confirm user email
      tags: [Authentication]
      parameters:
        - name: token
          in: query
          required: true
          schema: { type: string }
      responses:
        '200': { description: Email confirmed }
        '400': { description: Invalid or expired token }

  /auth/reset-password:
    post:
      summary: Request password reset
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email: { type: string, example: user@example.com }
      responses:
        '200': { description: Password reset email sent }
        '400': { description: Invalid email }

  /auth/reset-password/confirm:
    post:
      summary: Confirm password reset
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token: { type: string }
                password: { type: string }
      responses:
        '302': { description: Redirect to password reset success page }
        '400': { description: Invalid or expired token }

  # --- User Management ---
  /users/{id}:
    get:
      summary: Get user by ID
      tags: [User Management]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        '200': { description: User retrieved successfully }
        '401': { description: Invalid user }

  /users/update/{id}:
    patch:
      summary: Update user profile
      tags: [User Management]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200': { description: User updated successfully }
        '400': { description: Failed to update record }

  /users/{id}/upload:
    post:
      summary: Upload avatar
      tags: [User Management]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                avatar:
                  type: string
                  format: binary
      responses:
        '200': { description: File uploaded }
        '400': { description: File upload failed }

  /users/{id}/avatar:
    get:
      summary: Fetch user avatar
      tags: [User Management]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        '200': { description: Avatar retrieved }
        '400': { description: Avatar not found }

  /users/{id}/forget-password:
    post:
      summary: Simulate password recovery (demo)
      tags: [User Management]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        '200': { description: Password recovery simulated }

  # --- Organisation Management ---
  /organisations:
    get:
      summary: Get all organisations for a user
      tags: [Organisation Management]
      responses:
        '200': { description: Organisations retrieved successfully }
        '404': { description: No organisations found }
    post:
      summary: Create a new organisation
      tags: [Organisation Management]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Organisation'
      responses:
        '201': { description: Organisation created successfully }
        '400': { description: Invalid input }

  /organisations/{orgId}:
    get:
      summary: Get organisation by ID
      tags: [Organisation Management]
      parameters:
        - name: orgId
          in: path
          required: true
          schema: { type: integer }
      responses:
        '200': { description: Organisation retrieved successfully }
        '404': { description: Organisation not found }

  /organisations/{orgId}/allUsers:
    get:
      summary: Get all users in an organisation
      tags: [Organisation Management]
      parameters:
        - name: orgId
          in: path
          required: true
          schema: { type: integer }
      responses:
        '200': { description: Users retrieved successfully }
        '404': { description: No user found for this organisation }

  /organisations/{orgId}/addUser:
    post:
      summary: Add a user to an organisation
      tags: [Organisation Management]
      parameters:
        - name: orgId
          in: path
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId: { type: integer, example: 1 }
      responses:
        '200': { description: User successfully added to the organisation }
        '404': { description: Organisation not found }

  /organisations/{orgId}/assign-Admin:
    patch:
      summary: Assign admin role to a user in organisation
      tags: [Organisation Management]
      parameters:
        - name: orgId
          in: path
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId: { type: integer }
      responses:
        '200': { description: User successfully assigned as admin }
        '404': { description: Organisation or user not found }

  /organisations/{orgId}/removeAdmin:
    patch:
      summary: Remove admin role from a user in organisation
      tags: [Organisation Management]
      parameters:
        - name: orgId
          in: path
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId: { type: integer }
      responses:
        '200': { description: Admin role removed successfully }
        '404': { description: Organisation or user not found }

  /organisations/{orgId}/remove-user:
    delete:
      summary: Remove a user from organisation
      tags: [Organisation Management]
      parameters:
        - name: orgId
          in: path
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId: { type: integer }
      responses:
        '200': { description: User removed successfully }
        '404': { description: Organisation or user not found }

  /organisations/{orgId}/leave:
    post:
      summary: Leave organisation
      tags: [Organisation Management]
      parameters:
        - name: orgId
          in: path
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId: { type: integer }
      responses:
        '200': { description: User left organisation }
        '404': { description: Organisation or user not found }

components:
  schemas:
    User:
      type: object
      properties:
        userId: { type: integer }
        email: { type: string }
        firstName: { type: string }
        lastName: { type: string }
        phone: { type: string }
        refreshToken: { type: string }
    Organisation:
      type: object
      properties:
        orgId: { type: integer }
        name: { type: string }
        description: { type: string }